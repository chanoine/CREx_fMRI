function Gloups_1_fMRI_Preprocessing
%==========================================================================
% Preprocessing implementation for SPM12
% Author: Val√©rie Chanoine, Research Engineer at ILCB (http://www.ilcb.fr/)and BLRI (http://www.blri.fr/)
% Contact: Valerie.Chanoine@univ-amu.fr
% Co-authors from fMRI platform: Jean-Luc Anton and Julien Sein 
% Centre IRM-INT@CERIMED, Institut de Neurosciences de la Timone, Marseille, France)
% http://irmf.int.univ-amu.fr/
% Date: January 23, 2020
%==========================================================================    
    
    close all; clear all; clc;
   
    %======================================================================
    %  Define parametres in a general struture 'w'
    %======================================================================
   
    w.rawDir            = 'G:\GLOUPS\fMRIData\BIDS';     % input path 
    w.dataDir           = 'G:\GLOUPS\fMRIData\gloups\PREPROC';  % output path          
    w.subjDir           = { 'sub-01'};
 
    w.anatDir          	= 'anat';            % anatomical directory (parent=subjDir) 
    w.funcDir           = 'func';            % functional directory (parent=subjDir)
    w.fmapDir           = 'fmap';            % fieldmap directory  (parent=subjDir)
    w.sessions          = {'run-01', 'run-02', 'run-03', 'run-04', 'run-05'} 
    w.task              = 'task-gloups';  
    
    %======================================================================
    %  Initialise SPM
    %======================================================================
    spm('defaults','fmri');  
    spm_jobman('initcfg');
   
    %======================================================================
    %  Loop across subjects
    %======================================================================

    for iS=1:numel(w.subjDir)
             
        w.subName          = w.subjDir{iS};
        w.rawPath          = fullfile(w.rawDir, w.subName,w.subName);   
        w.subPath          = fullfile (w.dataDir,  w.subName); 
        
        w.funcPath         = fullfile (w.subPath, w.funcDir);
        w.anatPath         = fullfile (w.subPath,  w.anatDir);
        w.fmapPath         = fullfile (w.subPath,  w.fmapDir);
       
        fprintf('==================================================================\n');
        fprintf([w.subjDir{iS} ' Prepare Files...\n']);  
         
        %% Unzip and copy anatomical and functional files (BIDS format)     
        %DoGunzip(w);
        %DoCopyFiles(w);
        
        %% Load (anatomical and functional) json files
        json  = InitJasonParam(w);
       
        %% Parameters	          
        w.TR                = json.RepetitionTime;  % Repetition time (s)
        w.EchoTime          = json.EchoTime*1000;    
        w.ReadoutTime       = json.TotalReadoutTime*1000;                 
        w.blip = 1;
        if (strfind(json.PhaseEncodingDirection, 'j-'))
            w.blip = -1;
        end

        %% Get parameters for slice onset matrix
        w.slice_times       = bsxfun(@times, json.SliceTiming, 1000); % msec conversion
        w.refslice_time    	= w.slice_times(size(w.slice_times,2)/2);  
        w.refslice_index    = size(w.slice_times,2)/2;
          
        fprintf('==================================================================\n');
        fprintf([w.subjDir{iS} ' Preprocessing...\n']);  
        
        cd(w.subPath);
         
        DoFieldMap(w);     
%         DoRealignUnwarp(w);
%         DoCoregister(w);
%         DoSegment(w);
 %%       DoSegment_cat12(w)
%         DoNormalise(w);
%         DoSmooth(w);



    end    
end

function DoSegment_cat12(w)

    % Select the T1 3D image coregistered
    coregAnat = cellstr(spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$'])); 
  
    % Get template of each cerebral tissue
    tmp = {fullfile(spm('Dir'),'tpm', 'TPM.nii')};
%     tmpGM           = {fullfile(spm('Dir'),'tpm', 'TPM.nii,1')};
%     tmpWM           = {fullfile(spm('Dir'),'tpm', 'TPM.nii,2')};
%     tmpCSF          = {fullfile(spm('Dir'),'tpm', 'TPM.nii,3')};
%     tmpBone         = {fullfile(spm('Dir'),'tpm', 'TPM.nii,4')};      
%     tmpSoftTissue   = {fullfile(spm('Dir'),'tpm', 'TPM.nii,5')};               
%     tmpAirBck       = {fullfile(spm('Dir'),'tpm', 'TPM.nii,6')};   

    shootingtpm = {fullfile(spm('Dir'),'toolbox', 'cat12', 'templates_volumes', 'Template_0_IXI555_MNI152_GS.nii')};
    
    clear matlabbatch;
    
    matlabbatch{1}.spm.tools.cat.estwrite.data = coregAnat;
    matlabbatch{1}.spm.tools.cat.estwrite.data_wmh = {''};
    matlabbatch{1}.spm.tools.cat.estwrite.nproc = 2;
    matlabbatch{1}.spm.tools.cat.estwrite.useprior = '';
    matlabbatch{1}.spm.tools.cat.estwrite.opts.tpm = tmp;
    matlabbatch{1}.spm.tools.cat.estwrite.opts.affreg = 'mni';
    matlabbatch{1}.spm.tools.cat.estwrite.opts.biasacc = 0.5;
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.APP = 1070;
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.spm_kamap = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.LASstr = 0.5;
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.gcutstr = 2;
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.WMHC = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.registration.shooting.shootingtpm = shootingtpm
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.registration.shooting.regstr = 0.5;
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.vox = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.restypes.optimal = [1 0.1];
    matlabbatch{1}.spm.tools.cat.estwrite.extopts.ignoreErrors = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.surface = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.surf_measures = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.ROImenu.atlases.neuromorphometrics = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.ROImenu.atlases.lpba40 = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.ROImenu.atlases.cobra = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.ROImenu.atlases.hammers = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.ROImenu.atlases.ownatlas = {''};



    matlabbatch{1}.spm.tools.cat.estwrite.output.GM.native = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.GM.mod = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.GM.dartel = 2;
    matlabbatch{1}.spm.tools.cat.estwrite.output.WM.native = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.WM.mod = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.WM.dartel = 2;
    matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.native = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.mod = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.CSF.dartel = 2;
    matlabbatch{1}.spm.tools.cat.estwrite.output.ct.native = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.ct.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.ct.dartel = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.pp.native = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.pp.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.pp.dartel = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.native = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.mod = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.WMH.dartel = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.SL.native = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.SL.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.SL.mod = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.SL.dartel = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.TPMC.native = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.TPMC.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.TPMC.mod = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.TPMC.dartel = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.atlas.native = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.atlas.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.atlas.dartel = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.label.native = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.label.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.label.dartel = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.labelnative = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.bias.warped = 1;
    matlabbatch{1}.spm.tools.cat.estwrite.output.las.native = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.las.warped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.las.dartel = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.jacobianwarped = 0;
    matlabbatch{1}.spm.tools.cat.estwrite.output.warps = [1 1];
    matlabbatch{1}.spm.tools.cat.estwrite.output.rmat = 0; 
    
    save(fullfile(w.subPath, 'SPM12_matlabbatch_04_Segment_cat12.mat'),'matlabbatch');
    spm_jobman('run',matlabbatch);
end

function DoGunzip(w) 
    %% Unzip anatomical and functional files
    anat = fullfile(w.rawPath,  'anat');
    cd(anat); 
    gunzip('*.gz');
      
    fmap = fullfile(w.rawPath,  'fmap');
    cd(fmap); 
    gunzip('*.gz');
     
    func = fullfile(w.rawPath, 'func');
    cd(func); 
    gunzip('*.gz'); 
end

function DoCopyFiles(w)
    %% Copy anatomical and functional files for a new analysis
    files{1} = 'anat';
    files{2} = 'fmap';
    files{3} = 'func';   
   
    for iFiles=1:numel(files)   
        %% Define input and outout files
        inputDir  = fullfile(w.rawPath, files{iFiles});      
        outputDir = fullfile(w.subPath, files{iFiles}); 
        if (~file_exist(outputDir))
            mkdir(outputDir)
        end
        %% Copy nifti files
        task = '';
        if (strcmp(files{iFiles}, 'func'))
            task= w.task;
        end
        src = spm_select('FPList', inputDir, [w.subName '_' task '.*\.nii$']);  
        for iSrc =1:size(src,1)
            copyfile(src(iSrc,:), outputDir);
        end
        %% Copy json files
        src = spm_select('FPList', inputDir, [w.subName '_' task '.*\.json$']);        
        for iSrc =1:size(src,1)
            copyfile(src(iSrc,:), outputDir);
        end       
    end
end

function json = InitJasonParam(w)
    %% Load anatomical and functional json files
    json = [];      
    f1 = spm_select('FPList',  w.funcPath, ['^' w.subName '_' w.task   '_' w.sessions{1} '_bold\.json$']); 
    json = loadjson(f1);     
end

function DoFieldMap(w)  
    
    %% fmap fieldmap
    fmap_fmap = spm_select('ExtFPList', w.fmapPath,['^' w.subName '.*fieldmap\.nii$'], 1:1);  
   
    %% fmap magnitude  
    fmap_mag = spm_select('ExtFPList', w.fmapPath,['^' w.subName '.*magnitude\.nii$'], 1:1); 
     
        
	%% Get the T1 template  
    path_FielpMap = which('Fieldmap');
    [path name ext] = fileparts(path_FielpMap);
    template	=   fullfile(path, 'T1.nii');

    %% Get T1 structural file
    anatFile    =   spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$']); 
    
   
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.data.precalcfieldmap.precalcfieldmap = cellstr(fmap_fmap);
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.data.precalcfieldmap.magfieldmap = cellstr(fmap_mag);
    
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.et = [w.EchoTime w.EchoTime];
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.maskbrain = 0; % 1= Magnitude Image is choosen to generate Brain Mask
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.blipdir = w.blip;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.tert = w.ReadoutTime; % readout time   
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.epifm = 0;  % non-EPI based fieldmap
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.ajm = 0;    % Jacobian use do not use
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.uflags.method = 'Huttonish';    
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.uflags.fwhm = 10;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.uflags.pad = 15;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.uflags.ws = 1;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.template = cellstr(template);
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.fwhm = 5;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.nerode = 2;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.ndilate = 4;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.thresh = 0.5;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.defaults.defaultsval.mflags.reg = 0.02;      
  
    
    %%  Get the first EPI volume per session
    for j=1:numel(w.sessions) 
        EPIfile = spm_select('ExtFPList',  w.funcPath, ['^' w.subName  '.*' w.sessions{j} '_bold\.nii$'], 1:1);        
        matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.session(j).epi = cellstr(EPIfile);      
    end     
     
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.matchvdm = 0;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.sessname = 'session';
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.writeunwarped = 0;
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.anat = cellstr(anatFile);
    matlabbatch{1}.spm.tools.fieldmap.calculatevdm.subj.matchanat = 0;
    
    save(fullfile(w.subPath, 'SPM12_matlabbatch_1_Fieldmap.mat'),'matlabbatch'); 
        
    spm_jobman('run',matlabbatch);        
end

function DoRealignUnwarp(w)
	clear matlabbatch
  
	EPI = {};
    % Loop for sessions
    for j=1:numel(w.sessions)
        expReg = ['^vdm5.*' num2str(j) '\.nii$'];
        vdm = cellstr(spm_select('FPList', w.fmapPath, expReg));  % vdm (voxel deplacement map) file or phase map
        
        % Get EPI raw files
        f = spm_select('ExtFPList',  w.funcPath, ['^' w.subName  '.*' w.sessions{j} '_bold\.nii$'], Inf);        

        matlabbatch{1}.spm.spatial.realignunwarp.data(j).scans     = cellstr(f); 
        matlabbatch{1}.spm.spatial.realignunwarp.data(j).pmscan    = vdm;            
    end             

    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.quality = 0.9;
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.sep = 2.5;
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.fwhm = 5; 
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.rtm = 1;
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.einterp = 2; % 2nd degree Bspline (default value)
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.ewrap = [0 0 0];      
    matlabbatch{1}.spm.spatial.realignunwarp.eoptions.weight = '';
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.basfcn = [12 12];
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.regorder = 1;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.lambda = 100000;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.jm = 0;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.fot = [4 5];
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.sot = [];
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.uwfwhm = 4;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.rem = 1;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.noi = 5;
    matlabbatch{1}.spm.spatial.realignunwarp.uweoptions.expround = 'Average';
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.uwwhich = [2 1];
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.rinterp = 4;    %   % 4th degree Bspline (default value)
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.wrap = [0 0 0];
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.mask = 1;
    matlabbatch{1}.spm.spatial.realignunwarp.uwroptions.prefix = 'u';
    
    save(fullfile(w.subPath, 'SPM12_matlabbatch_2_Realign&Unwarp.mat'),'matlabbatch');
    
    spm_jobman('run',matlabbatch);       
end   

function DoCoregister(w)

    % Get T1 structural file
    a = spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$']); 
     
    % Get mean realigned and unwarped EPI
    meanUnwarp = spm_select('FPList', w.funcPath, ['^meanu' w.subName  '.*\.nii$']); 
   
    clear matlabbatch
    matlabbatch{1}.spm.spatial.coreg.estimate.ref = cellstr(meanUnwarp);
    matlabbatch{1}.spm.spatial.coreg.estimate.source = cellstr(a);
    matlabbatch{1}.spm.spatial.coreg.estimate.other = {''};
    matlabbatch{1}.spm.spatial.coreg.estimate.eoptions.cost_fun = 'nmi';
    matlabbatch{1}.spm.spatial.coreg.estimate.eoptions.sep = [4 2];
    matlabbatch{1}.spm.spatial.coreg.estimate.eoptions.tol = [0.02 0.02 0.02 0.001 0.001 0.001 0.01 0.01 0.01 0.001 0.001 0.001];
    matlabbatch{1}.spm.spatial.coreg.estimate.eoptions.fwhm = [7 7];
   
	save(fullfile(w.subPath, 'SPM12_matlabbatch_3_Coregister.mat'),'matlabbatch');  
    
    spm_jobman('run',matlabbatch);  
end

function DoSegment(w)

    % Select the T1 image coregistered to unwarped mean functional image
    coregAnat = cellstr(spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$'])); 
  
    % Get template of each cerebral tissue
    tmpGM           = {fullfile(spm('Dir'),'tpm', 'TPM.nii,1')};
    tmpWM           = {fullfile(spm('Dir'),'tpm', 'TPM.nii,2')};
    tmpCSF          = {fullfile(spm('Dir'),'tpm', 'TPM.nii,3')};
    tmpBone         = {fullfile(spm('Dir'),'tpm', 'TPM.nii,4')};      
    tmpSoftTissue   = {fullfile(spm('Dir'),'tpm', 'TPM.nii,5')};               
    tmpAirBck       = {fullfile(spm('Dir'),'tpm', 'TPM.nii,6')};        

    clear matlabbatch;                             
    matlabbatch{1}.spm.spatial.preproc.channel.vols = coregAnat;
    matlabbatch{1}.spm.spatial.preproc.channel.biasreg = 0.001; % Bias regularisation light
    matlabbatch{1}.spm.spatial.preproc.channel.biasfwhm = 60;  % 60 mm cutoff
    matlabbatch{1}.spm.spatial.preproc.channel.write = [1 1];     
    matlabbatch{1}.spm.spatial.preproc.tissue(1).tpm = tmpGM;
    matlabbatch{1}.spm.spatial.preproc.tissue(1).ngaus = 1;
    matlabbatch{1}.spm.spatial.preproc.tissue(1).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(1).warped = [0 0];  
    matlabbatch{1}.spm.spatial.preproc.tissue(2).tpm = tmpWM;
    matlabbatch{1}.spm.spatial.preproc.tissue(2).ngaus = 1;
    matlabbatch{1}.spm.spatial.preproc.tissue(2).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(2).warped = [0 0];
    matlabbatch{1}.spm.spatial.preproc.tissue(3).tpm = tmpCSF;
    matlabbatch{1}.spm.spatial.preproc.tissue(3).ngaus = 2;
    matlabbatch{1}.spm.spatial.preproc.tissue(3).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(3).warped = [0 0];
    matlabbatch{1}.spm.spatial.preproc.tissue(4).tpm = tmpBone;
    matlabbatch{1}.spm.spatial.preproc.tissue(4).ngaus = 3;
    matlabbatch{1}.spm.spatial.preproc.tissue(4).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(4).warped = [0 0];
    matlabbatch{1}.spm.spatial.preproc.tissue(5).tpm = tmpSoftTissue;
    matlabbatch{1}.spm.spatial.preproc.tissue(5).ngaus = 4;
    matlabbatch{1}.spm.spatial.preproc.tissue(5).native = [1 0];  %native
    matlabbatch{1}.spm.spatial.preproc.tissue(5).warped = [0 0];        
    matlabbatch{1}.spm.spatial.preproc.tissue(6).tpm = tmpAirBck;
    matlabbatch{1}.spm.spatial.preproc.tissue(6).ngaus = 2;
    matlabbatch{1}.spm.spatial.preproc.tissue(6).native = [0 0];
    matlabbatch{1}.spm.spatial.preproc.tissue(6).warped = [0 0];     
    matlabbatch{1}.spm.spatial.preproc.warp.mrf = 1;
    matlabbatch{1}.spm.spatial.preproc.warp.cleanup = 1;
    matlabbatch{1}.spm.spatial.preproc.warp.reg = [0 0.001 0.5 0.05 0.2];
    matlabbatch{1}.spm.spatial.preproc.warp.affreg = 'mni';
    matlabbatch{1}.spm.spatial.preproc.warp.fwhm = 0;
    matlabbatch{1}.spm.spatial.preproc.warp.samp = 2; % better sampling 
    matlabbatch{1}.spm.spatial.preproc.warp.write = [0 1];   %  Forward

    save(fullfile(w.subPath, 'SPM12_matlabbatch_4_Segment.mat'),'matlabbatch'); 
    
    spm_jobman('run',matlabbatch);       
end


function DoNormalise(w)
        
	% Get Field Deformation image
    forwardDeformation = spm_select('FPList', w.anatPath, ['^y_' w.subName '.*T1w\.nii$']);  
    
    % Get coregistered structural image
    coregAnat = spm_select('FPList', w.anatPath, ['^' w.subName '.*T1w\.nii$']);  
    
    % Get vector of voxel dimensions {mm} on structural image
    [BBa, vxa] =  spm_get_bbox(coregAnat);
    
    % Get Sliced EPI images of all sessions
    EPI = {};
    vxb = [];
    % Loop on sessions
    for j=1:numel(w.sessions)      
        % Get EPI Realigned files
        f = spm_select('ExtFPList',  w.funcPath, ['^u' w.subName  '.*' w.sessions{j} '_bold\.nii$'], Inf); 
        EPI = vertcat(EPI, cellstr(f));  
        
        if isempty(vxb)
            % vector of voxel dimensions {mm} on EPI image
            [BBb, vxb] =  spm_get_bbox(f);
        end
    end
    
    % Get c1  c2  and c3 
    c1 = spm_select('FPList', w.anatPath, ['^c1' w.subName '.*T1w\.nii$']);  
    c2 = spm_select('FPList', w.anatPath, ['^c2' w.subName '.*T1w\.nii$']);    
    c3 = spm_select('FPList', w.anatPath, ['^c3' w.subName '.*T1w\.nii$']);   
    c1c2c3 = vertcat(c1, c2, c3);   
           
    clear matlabbatch;         
    matlabbatch{1}.spm.spatial.normalise.write.subj.def = {forwardDeformation};
    matlabbatch{1}.spm.spatial.normalise.write.subj.resample = {coregAnat};
    matlabbatch{1}.spm.spatial.normalise.write.woptions.bb = NaN(2,3);
    matlabbatch{1}.spm.spatial.normalise.write.woptions.vox = abs(vxa);
    matlabbatch{1}.spm.spatial.normalise.write.woptions.interp = 4;
    
    matlabbatch{2}.spm.spatial.normalise.write.subj.def(1) = {forwardDeformation};
    matlabbatch{2}.spm.spatial.normalise.write.subj.resample = cellstr(EPI);    
    matlabbatch{2}.spm.spatial.normalise.write.woptions.bb = NaN(2,3);
    matlabbatch{2}.spm.spatial.normalise.write.woptions.vox = abs(vxb);
    matlabbatch{2}.spm.spatial.normalise.write.woptions.interp = 4;
    
    matlabbatch{3}.spm.spatial.normalise.write.subj.def(1) = {forwardDeformation};
    matlabbatch{3}.spm.spatial.normalise.write.subj.resample = cellstr(c1c2c3) ;   
    matlabbatch{3}.spm.spatial.normalise.write.woptions.bb = NaN(2,3);
    matlabbatch{3}.spm.spatial.normalise.write.woptions.vox = abs(vxb);
    matlabbatch{3}.spm.spatial.normalise.write.woptions.interp = 4;         

    save(fullfile(w.subPath, 'SPM12_matlabbatch_5_Normalize.mat'),'matlabbatch');   
    
    spm_jobman('run',matlabbatch);  
end

function DoSmooth(w)

    clear matlabbatch;
    EPI = [];
    vxb = [];
    for j=1:numel(w.sessions)    
        % Get Normalized EPI files
        f = spm_select('ExtFPList',  w.funcPath, ['^wu' w.subName  '.*' w.sessions{j} '_bold\.nii$'], Inf);       
        EPI = vertcat(EPI, cellstr(f));   
        
        if isempty(vxb)
            % vector of voxel dimensions {mm} on EPI image
            [BBb, vxb] =  spm_get_bbox(f);
        end      
        
    end
    matlabbatch{1}.spm.spatial.smooth.data = cellstr(EPI);
    matlabbatch{1}.spm.spatial.smooth.fwhm = [abs(vxb) * 2];
    matlabbatch{1}.spm.spatial.smooth.dtype = 0;
    matlabbatch{1}.spm.spatial.smooth.im = 0;
    matlabbatch{1}.spm.spatial.smooth.prefix = 's';
    
    save(fullfile(w.subPath, 'SPM12_matlabbatch_6_Smooth.mat'),'matlabbatch'); 
        
    spm_jobman('run',matlabbatch);     
end

function DoExplicitMask(w)

    %% Get normalized tissus (grey and white matter, CSF)
    wc1 = spm_select('FPList', w.anatPath, ['^wc1' w.subName '.*T1w\.nii$']);  
    wc2 = spm_select('FPList', w.anatPath, ['^wc2' w.subName '.*T1w\.nii$']);  
    wc3 = spm_select('FPList', w.anatPath, ['^wc3' w.subName '.*T1w\.nii$']);   

    P = [wc1; wc2; wc3];  
    
    matlabbatch{1}.spm.util.imcalc.input = cellstr(P);
    matlabbatch{1}.spm.util.imcalc.output = fullfile(w.anatPath, 'explicitMask_wc1wc2wc3_03.nii');
    matlabbatch{1}.spm.util.imcalc.outdir = {''};
    matlabbatch{1}.spm.util.imcalc.expression = '(i1+i2+i3)>0.3';
    matlabbatch{1}.spm.util.imcalc.options.dmtx = 0;
    matlabbatch{1}.spm.util.imcalc.options.mask = 0;
    matlabbatch{1}.spm.util.imcalc.options.interp = 1;
    matlabbatch{1}.spm.util.imcalc.options.dtype = 4;   
       
    save(fullfile(w.subPath, 'SPM12_matlabbatch_7_Mask.mat'),'matlabbatch'); 

    spm_jobman('run',matlabbatch);     
end
